<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用GitHub和HEXO免费搭建个人博客高级 美化篇</title>
    <url>/2019/01/29/hello-world/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>1</title>
    <url>/2024/10/30/1/</url>
    <content><![CDATA[<p>时钟里的补数<br>现在指向6点，如果想到3点，逆时针拨动3格，顺时针拨动9格到，所以-3和9互为补数</p>
<p>补码的目的<br>计算机里存储的是补码，为了让计算机里存储的数，加减法使用同一套电路，也就是补码加减器，做减法时，+负数的补码，就将减法转换为了加法</p>
<p>所以补码有符号位<br>假设是8位补码系统，[00000000,01111111]是正数，[10000000,11111111]是负数<br>根据负数求补码的公式：x是真值，x&lt;0, [x]补 &#x3D; 256+x &#x3D;&#x3D;&#x3D;&#x3D;&gt; x&#x3D;[x]补-256,得到了根据补码求真值的普遍方法(适用于任何补码):<br>[-1]补&#x3D;256+(-1)&#x3D;255&#x3D;11111111 ，-1 &#x3D;补码11111111-256<br>[-127]补&#x3D;256+(-127)&#x3D;129&#x3D;10000001，-127&#x3D;补码10000001-256</p>
<p>特殊的-128来了<br>[-128]补&#x3D;256+(-128)&#x3D;128&#x3D;10000000 ,-128&#x3D;补码10000000-256,所以补码10000000的真值为-128</p>
<p>已知补码求真值，一般方法可以是：补码-1求得反码，反码求原码，再求真值<br>补码11111111，反码11111110，原码10000001，真值-1<br>补码10000001，反码10000000，原码11111110，真值-127</p>
<p>但是特殊的补码10000000呢？<br>补码10000000，反码01111111，原码10000000，真值-0 这个肯定是错误的，-0在计算机中以00000000的补码形式存储，与+0一样<br>其实这里开始就错了：<br>普遍方法中求得的真值永远是对的，所以补码为10000000&#x3D;&gt;符号位为1，所以是负数，所以按照公式[x]补 &#x3D; 256+x求真值x,x&#x3D;10000000-256&#x3D;-10000000&#x3D;-128<br>我们知道真值-128，不存在8位原码，8位反码，所以不能根据这种一般方法求</p>
<p>所以为了不出错，我们需要记住10000000这个特殊的机器数，不存在原码，反码，所以补码求原码这种算法不存在</p>
<p>这就是特殊的机器数，1……..,1后面n-1个0（假设机器字长为n位）</p>
<p>why [负数]补码&#x3D;[-负数]的补码,取反+1<br>[负数]补+[-负数]补&#x3D;模，在时钟中，模为12，在定点小数中，模为2，在n位整数中模为2^n<br>例如：8位整数<br>[-1]补+[1]补 &#x3D; 11111111+00000001&#x3D;1 0000 0000 &#x3D; 256 &#x3D; 2^8<br>[-x]补+[x]补 &#x3D; 2^n,假设x&gt;0,so: [-x]补+[x]补&#x3D;2^n,即[-x]补+x&#x3D;2^n,so: [-x]补 &#x3D; 2^n-x &#x3D; (2^n-1-x)+1<br>即：</p>
<p>set x&#x3D;1,[-x]补 &#x3D; (2^8-1-x)+1 &#x3D; (11111111-1)+1 &#x3D; (11111111-00000001)+1<br>可以看到括号里面的00000001就是+1的补码，括号的结果就是+1的补码取反的结果<br>即：11111110，+1得到11111111<br>所以常说负数的补码等于其正数的补码取反+1</p>
<p>例外情况<br>从来如此，便一定对吗<br>还是内个熟悉的真值-128<br>假设按上面的求法，[-128]补&#x3D;[128]补,取反+1<br>但是我们发现，128根本没有8位补码，所以只能用公式法求了，[x]补&#x3D;x+256,即:</p>
<p>[-128]&#x3D;-128+256&#x3D;1 0000 0000 - 10000000 &#x3D; (11111111 - 10000000)+1 &#x3D; 10000000<br>会发现这个公式其实与上面的计算过程一样</p>
<p>所以[负数]补码&#x3D;[正数]补码取反+1不太好<br>应为-128对应的负数不存在补码，但是，**[负数]补&#x3D;[正数对应的二进制]取反+1**,这样就适用于任意情况了，这才是正确的公式</p>
]]></content>
  </entry>
</search>
