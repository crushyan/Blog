<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用GitHub和HEXO免费搭建个人博客高级 美化篇</title>
    <url>/2019/01/29/hello-world/</url>
    <content><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>1</title>
    <url>/2024/10/30/1/</url>
    <content><![CDATA[<h1 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h1>]]></content>
      <categories>
        <category>计算机系统基础</category>
      </categories>
  </entry>
  <entry>
    <title>补码公式推导</title>
    <url>/2024/10/30/%E8%A1%A5%E7%A0%81%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</url>
    <content><![CDATA[<p>why [负数]补码&#x3D;[-负数]的补码,取反+1<br>[负数]补+[-负数]补&#x3D;模，在时钟中，模为12，在定点小数中，模为2，在n位整数中模为2^n<br>例如：8位整数<br>[-1]补+[1]补 &#x3D; 11111111+00000001&#x3D;1 0000 0000 &#x3D; 256 &#x3D; 2^8<br>[-x]补+[x]补 &#x3D; 2^n,假设x&gt;0,so: [-x]补+[x]补&#x3D;2^n,即[-x]补+x&#x3D;2^n,so: [-x]补 &#x3D; 2^n-x &#x3D; (2^n-1-x)+1<br>即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set x=1,[-x]补 = (2^8-1-x)+1 = (11111111-1)+1 = (11111111-00000001)+1</span><br></pre></td></tr></table></figure>
<p>可以看到括号里面的00000001就是+1的补码，括号的结果就是+1的补码取反的结果<br>即：11111110，+1得到11111111<br>所以常说负数的补码等于其正数的补码取反+1</p>
<p>例外情况<br>从来如此，便一定对吗<br>还是内个熟悉的真值-128<br>假设按上面的求法，[-128]补&#x3D;[128]补,取反+1<br>但是我们发现，128根本没有8位补码，所以只能用公式法求了，[x]补&#x3D;x+256,即:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[-128]=-128+256=1 0000 0000 - 10000000 = (11111111 - 10000000)+1 = 10000000</span><br></pre></td></tr></table></figure>
<p>会发现这个公式其实与上面的计算过程一样</p>
<p>所以[负数]补码&#x3D;[正数]补码取反+1不太好<br>应为-128对应的负数不存在补码，但是，**[负数]补&#x3D;[正数对应的二进制]取反+1**,这样就适用于任意情况了，这才是正确的公式</p>
]]></content>
  </entry>
  <entry>
    <title>补码之特殊的10000000</title>
    <url>/2024/10/30/%E8%A1%A5%E7%A0%81%E4%B9%8B%E7%89%B9%E6%AE%8A%E7%9A%8410000000/</url>
    <content><![CDATA[<h2 id="时钟里的补数"><a href="#时钟里的补数" class="headerlink" title="时钟里的补数"></a>时钟里的补数</h2><p>现在指向6点，如果想到3点，逆时针拨动3格，顺时针拨动9格到，所以-3和9互为补数</p>
<h2 id="补码的目的"><a href="#补码的目的" class="headerlink" title="补码的目的"></a>补码的目的</h2><p>计算机里存储的是补码，为了让计算机里存储的数，加减法使用同一套电路，也就是补码加减器，做减法时，+负数的补码，就将减法转换为了加法</p>
<p>所以补码有符号位<br>假设是8位补码系统，[00000000,01111111]是正数，[10000000,11111111]是负数<br>根据负数求补码的公式：x是真值，x&lt;0, [x]补 &#x3D; 256+x &#x3D;&#x3D;&#x3D;&#x3D;&gt; x&#x3D;[x]补-256,得到了根据补码求真值的<strong>普遍方法</strong>(<strong>适用于任何补码</strong>):<br>[-1]补&#x3D;256+(-1)&#x3D;255&#x3D;11111111 ，-1 &#x3D;补码11111111-256<br>[-127]补&#x3D;256+(-127)&#x3D;129&#x3D;10000001，-127&#x3D;补码10000001-256</p>
<p>特殊的-128来了<br>[-128]补&#x3D;256+(-128)&#x3D;128&#x3D;10000000 ,-128&#x3D;补码10000000-256,所以补码10000000的真值为-128</p>
<p>已知补码求真值，<strong>一般方法</strong>可以是：补码-1求得反码，反码求原码，再求真值<br>补码11111111，反码11111110，原码10000001，真值-1<br>补码10000001，反码10000000，原码11111110，真值-127</p>
<p>但是特殊的补码10000000呢？<br>补码10000000，反码01111111，原码10000000，真值-0 这个肯定是错误的，-0在计算机中以00000000的补码形式存储，与+0一样<br>其实这里开始就错了：<br>普遍方法中求得的真值永远是对的，所以补码为10000000&#x3D;&gt;符号位为1，所以是负数，所以按照公式[x]补 &#x3D; 256+x求真值x,x&#x3D;10000000-256&#x3D;-10000000&#x3D;-128<br>我们知道真值-128，不存在8位原码，8位反码，所以不能根据这种一般方法求</p>
<p>所以为了不出错，我们需要记住10000000这个特殊的机器数，不存在原码，反码，所以补码求原码这种算法不存在</p>
<p>这就是特殊的机器数，1……..,1后面n-1个0（假设机器字长为n位）</p>
]]></content>
  </entry>
  <entry>
    <title>English</title>
    <url>/2024/10/30/English/</url>
    <content><![CDATA[<h2 id="Iansdbc"><a href="#Iansdbc" class="headerlink" title="Iansdbc"></a>Iansdbc</h2><p>English学习</p>
]]></content>
      <categories>
        <category>hexo建站</category>
        <category>hexo部署</category>
        <category>github部署</category>
        <category>个人博客</category>
      </categories>
  </entry>
  <entry>
    <title>日常杂记</title>
    <url>/2024/10/30/%E6%97%A5%E5%B8%B8%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="日常一事"><a href="#日常一事" class="headerlink" title="日常一事"></a>日常一事</h2>]]></content>
      <tags>
        <tag>日常杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++系列</title>
    <url>/2024/10/30/C++%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="C-内存管理"><a href="#C-内存管理" class="headerlink" title="[C++内存管理]"></a>[C++内存管理]</h2>]]></content>
      <categories>
        <category>C++系列</category>
      </categories>
  </entry>
  <entry>
    <title>内联汇编与宏</title>
    <url>/2024/10/30/%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E4%B8%8E%E5%AE%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>内联汇编与宏</category>
      </categories>
  </entry>
  <entry>
    <title>编译</title>
    <url>/2024/10/30/%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h2 id="C-编译"><a href="#C-编译" class="headerlink" title="C++编译"></a>C++编译</h2><p>在 visual studio 中使用以下步骤来只编译一个源文件：<br>在“解决方案资源管理器”中，右键单击要编译的源文件。<br>选择“属性”选项。<br>在“属性页”中，选择“常规”选项卡。<br>将“项类型”设置为“不参与生成”。<br><img src="/images/2.png" alt="图片"><br>单击“确定”按钮。</p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>比如#include,#define,if def等都是预处理，预处理器将其.h文件中的函数声明等信息复制粘贴到.cpp文件</p>
<p>首先开启C++的配置：打开C++预处理到文件的选项，如下：<br><img src="/images/1.png" alt="图片"><br>这里选项改为是</p>
<p>VS编译器用的还是不习惯，用Linux下的编译器算了</p>
<p>Math.cpp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#int Multiply(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int result=a*b;</span><br><span class="line">    return result;</span><br><span class="line">#include &quot;yxl&quot;</span><br></pre></td></tr></table></figure>

<p>yxl.h，注意在linux下直接vim yxl即可，不要vim yxl.h，否则报错: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.cpp:5:10: fatal error: yxl: No such file or directory</span><br><span class="line">      | #include &quot;yxl&quot;</span><br><span class="line">      |          ^~~~~</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -c Math.cpp -o Math</span><br></pre></td></tr></table></figure>
<p>要开启选项 -c,否则报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ld: /usr/lib/gcc/i686-linux-gnu/12/../../../i386-linux-gnu/Scrt1.o: in function `_start&#x27;:</span><br><span class="line">(.text+0x1e): undefined reference to `main&#x27;</span><br></pre></td></tr></table></figure>
<p>_start就是x64系统的程序执行入口，对应C语言的main函数</p>
<p>求Math.cpp，预处理文件<br>g++ -E Math.cpp -o Math.i</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 0 &quot;Math.cpp&quot;                                                                                                                 </span><br><span class="line">  0 &quot;&lt;built-in&gt;&quot;</span><br><span class="line">  0 &quot;&lt;command-line&gt;&quot;</span><br><span class="line">  1 &quot;/usr/include/stdc-predef.h&quot; 1 3 4 </span><br><span class="line">  0 &quot;&lt;command-line&gt;&quot; 2</span><br><span class="line">  1 &quot;Math.cpp&quot;</span><br><span class="line">int Multiply(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int result=a*b;</span><br><span class="line">    return result;</span><br><span class="line">  1 &quot;yxl&quot; 1</span><br><span class="line">&#125;</span><br><span class="line">6 &quot;Math.cpp&quot; 2</span><br></pre></td></tr></table></figure>

<p>发现yxl.h里的}复制到了Math.cpp里</p>
<h3 id="文件不重要"><a href="#文件不重要" class="headerlink" title="文件不重要"></a>文件不重要</h3><p>编译器知道对于.cpp文本文件，就把他编译成一个机器码，在CPU上可以直接跑，这是我们规定的<br>假如告诉编译器，对于.yxl文本文件，也像C++文本文件一样处理，同样可以得到直接在CPU上跑的机器码</p>
<h3 id="是否开启编译优化带来的影响"><a href="#是否开启编译优化带来的影响" class="headerlink" title="是否开启编译优化带来的影响"></a>是否开启编译优化带来的影响</h3><p>objdump -S Math.o &gt; Math.s</p>
<p>不开启优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Multiply(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int result=a*b;</span><br><span class="line">    return result;</span><br><span class="line">#include &quot;yxl&quot;  </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -c -O3 Math.cpp -o Math</span><br><span class="line">objdump -S Math &gt; Math.s</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;_Z8Multiplyii&gt;:</span><br><span class="line">   0: 55                    push   %ebp</span><br><span class="line">   1: 89 e5                 mov    %esp,%ebp</span><br><span class="line">   3: 83 ec 10              sub    $0x10,%esp</span><br><span class="line">   6: e8 fc ff ff ff        call   7 &lt;_Z8Multiplyii+0x7&gt;</span><br><span class="line">   b: 05 01 00 00 00        add    $0x1,%eax</span><br><span class="line">  10: 8b 45 08              mov    0x8(%ebp),%eax</span><br><span class="line">  13: 0f af 45 0c           imul   0xc(%ebp),%eax</span><br><span class="line">  17: 89 45 fc              mov    %eax,-0x4(%ebp)</span><br><span class="line">  1a: 8b 45 fc              mov    -0x4(%ebp),%eax</span><br><span class="line">  1d: c9                    leave</span><br><span class="line">  1e: c3                    ret</span><br><span class="line"></span><br><span class="line">Disassembly of section .text.__x86.get_pc_thunk.ax:</span><br><span class="line"></span><br><span class="line">00000000 &lt;__x86.get_pc_thunk.ax&gt;:</span><br><span class="line">   0: 8b 04 24              mov    (%esp),%eax</span><br><span class="line">   3: c3                    ret</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到,这里a在0x8(%ebp),b在0xc(%ebp)，result在-0x4(%ebp)中，然后将-0x4(%ebp)放到%eax，如果开启编译优化，17和1a这两行，是没有的，看下面</p>
<p>开启优化代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int Multiply(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    return a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ -O2 -c  Math.cpp -o Math</span><br><span class="line">objdump -S Math.o &gt; Math.s</span><br></pre></td></tr></table></figure>
<p>汇编代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math:     file format elf32-i386</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;_Z8Multiplyii&gt;:</span><br><span class="line">   0: 8b 44 24 08           mov    0x8(%esp),%eax</span><br><span class="line">   4: 0f af 44 24 04        imul   0x4(%esp),%eax</span><br><span class="line">   9: c3                    ret</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到分配变量的操作可能导致更多的寄存器，和更长的汇编指令和机器指令</p>
]]></content>
      <categories>
        <category>C++系列，C++编译</category>
      </categories>
  </entry>
</search>
